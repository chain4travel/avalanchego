// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ids "github.com/chain4travel/caminogo/ids"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CalculateUptime provides a mock function with given fields: nodeID
func (_m *Manager) CalculateUptime(nodeID ids.ShortID) (time.Duration, time.Time, error) {
	ret := _m.Called(nodeID)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(ids.ShortID) time.Duration); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(ids.ShortID) time.Time); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ids.ShortID) error); ok {
		r2 = rf(nodeID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CalculateUptimePercent provides a mock function with given fields: nodeID
func (_m *Manager) CalculateUptimePercent(nodeID ids.ShortID) (float64, error) {
	ret := _m.Called(nodeID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(ids.ShortID) float64); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ids.ShortID) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateUptimePercentFrom provides a mock function with given fields: nodeID, startTime
func (_m *Manager) CalculateUptimePercentFrom(nodeID ids.ShortID, startTime time.Time) (float64, error) {
	ret := _m.Called(nodeID, startTime)

	var r0 float64
	if rf, ok := ret.Get(0).(func(ids.ShortID, time.Time) float64); ok {
		r0 = rf(nodeID, startTime)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ids.ShortID, time.Time) error); ok {
		r1 = rf(nodeID, startTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields: nodeID
func (_m *Manager) Connect(nodeID ids.ShortID) error {
	ret := _m.Called(nodeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(ids.ShortID) error); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: nodeID
func (_m *Manager) Disconnect(nodeID ids.ShortID) error {
	ret := _m.Called(nodeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(ids.ShortID) error); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConnected provides a mock function with given fields: nodeID
func (_m *Manager) IsConnected(nodeID ids.ShortID) bool {
	ret := _m.Called(nodeID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ids.ShortID) bool); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Shutdown provides a mock function with given fields: nodeIDs
func (_m *Manager) Shutdown(nodeIDs []ids.ShortID) error {
	ret := _m.Called(nodeIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]ids.ShortID) error); ok {
		r0 = rf(nodeIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartTracking provides a mock function with given fields: nodeIDs
func (_m *Manager) StartTracking(nodeIDs []ids.ShortID) error {
	ret := _m.Called(nodeIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]ids.ShortID) error); ok {
		r0 = rf(nodeIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
