// Code generated by MockGen. DO NOT EDIT.
// Source: cache/cache.go
//
// Generated by this command:
//
//	mockgen -source=cache/cache.go -destination=cache/mock_cacher.go -package=cache -exclude_interfaces=
//

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher[K comparable, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder[K, V]
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder[K comparable, V any] struct {
	mock *MockCacher[K, V]
}

// NewMockCacher creates a new mock instance.
func NewMockCacher[K comparable, V any](ctrl *gomock.Controller) *MockCacher[K, V] {
	mock := &MockCacher[K, V]{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher[K, V]) EXPECT() *MockCacherMockRecorder[K, V] {
	return m.recorder
}

// Evict mocks base method.
func (m *MockCacher[K, V]) Evict(key K) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Evict", key)
}

// Evict indicates an expected call of Evict.
func (mr *MockCacherMockRecorder[K, V]) Evict(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockCacher[K, V])(nil).Evict), key)
}

// Flush mocks base method.
func (m *MockCacher[K, V]) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockCacherMockRecorder[K, V]) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockCacher[K, V])(nil).Flush))
}

// Get mocks base method.
func (m *MockCacher[K, V]) Get(key K) (V, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacherMockRecorder[K, V]) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher[K, V])(nil).Get), key)
}

// Len mocks base method.
func (m *MockCacher[K, V]) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockCacherMockRecorder[K, V]) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCacher[K, V])(nil).Len))
}

// PortionFilled mocks base method.
func (m *MockCacher[K, V]) PortionFilled() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortionFilled")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PortionFilled indicates an expected call of PortionFilled.
func (mr *MockCacherMockRecorder[K, V]) PortionFilled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortionFilled", reflect.TypeOf((*MockCacher[K, V])(nil).PortionFilled))
}

// Put mocks base method.
func (m *MockCacher[K, V]) Put(key K, value V) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockCacherMockRecorder[K, V]) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCacher[K, V])(nil).Put), key, value)
}

// MockEvictable is a mock of Evictable interface.
type MockEvictable[K comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockEvictableMockRecorder[K]
}

// MockEvictableMockRecorder is the mock recorder for MockEvictable.
type MockEvictableMockRecorder[K comparable] struct {
	mock *MockEvictable[K]
}

// NewMockEvictable creates a new mock instance.
func NewMockEvictable[K comparable](ctrl *gomock.Controller) *MockEvictable[K] {
	mock := &MockEvictable[K]{ctrl: ctrl}
	mock.recorder = &MockEvictableMockRecorder[K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvictable[K]) EXPECT() *MockEvictableMockRecorder[K] {
	return m.recorder
}

// Evict mocks base method.
func (m *MockEvictable[K]) Evict() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Evict")
}

// Evict indicates an expected call of Evict.
func (mr *MockEvictableMockRecorder[K]) Evict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockEvictable[K])(nil).Evict))
}

// Key mocks base method.
func (m *MockEvictable[K]) Key() K {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(K)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockEvictableMockRecorder[K]) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockEvictable[K])(nil).Key))
}

// MockDeduplicator is a mock of Deduplicator interface.
type MockDeduplicator[K comparable, V Evictable[K]] struct {
	ctrl     *gomock.Controller
	recorder *MockDeduplicatorMockRecorder[K, V]
}

// MockDeduplicatorMockRecorder is the mock recorder for MockDeduplicator.
type MockDeduplicatorMockRecorder[K comparable, V Evictable[K]] struct {
	mock *MockDeduplicator[K, V]
}

// NewMockDeduplicator creates a new mock instance.
func NewMockDeduplicator[K comparable, V Evictable[K]](ctrl *gomock.Controller) *MockDeduplicator[K, V] {
	mock := &MockDeduplicator[K, V]{ctrl: ctrl}
	mock.recorder = &MockDeduplicatorMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeduplicator[K, V]) EXPECT() *MockDeduplicatorMockRecorder[K, V] {
	return m.recorder
}

// Deduplicate mocks base method.
func (m *MockDeduplicator[K, V]) Deduplicate(arg0 V) V {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deduplicate", arg0)
	ret0, _ := ret[0].(V)
	return ret0
}

// Deduplicate indicates an expected call of Deduplicate.
func (mr *MockDeduplicatorMockRecorder[K, V]) Deduplicate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deduplicate", reflect.TypeOf((*MockDeduplicator[K, V])(nil).Deduplicate), arg0)
}

// Flush mocks base method.
func (m *MockDeduplicator[K, V]) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockDeduplicatorMockRecorder[K, V]) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDeduplicator[K, V])(nil).Flush))
}
